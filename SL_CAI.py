# cai_regression.py
import re
import itertools
from collections import Counter

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, cross_val_score, KFold
from sklearn.linear_model import RidgeCV
from sklearn.ensemble import RandomForestRegressor
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error

from CAI import CAI

def safe_float_from_cai_obj(obj):
    try:
        return float(obj)
    except Exception:
        pass
    if hasattr(obj, "cai"):
        return float(obj.cai)
    if hasattr(obj, "value"):
        return float(obj.value)
    raise ValueError("Unknown CAI object -> can't extract float")

def_refs = [
    "ATGGATGATGATATCGCCGCGCTCGTCGTCGACAACGGCTCCGGCATGTGCAAGGCCGGCTTCGCGGGCGACGATGCCCCCCGGGCCGTCTTCCCCTCCATCGTGGGGCGCCCCAGGCACCAGGGCGTGATGGTGGGCATGGGTCAGAAGGATTCCTATGTGGGCGACGAGGCCCAGAGCAAGAGAGGCATCCTCACCCTGAAGTACCCCATCGAGCACGGCATCGTCACCAACTGGGACGACATGGAGAAAATCTGGCACCACACCTTCTACAATGAGCTGCGTGTGGCTCCCGAGGAGCACCCCGTGCTGCTGACCGAGGCCCCCCTGAACCCCAAGGCCAACCGCGAGAAGATGACCCAGATCATGTTTGAGACCTTCAACACCCCAGCCATGTACGTTGCTATCCAGGCTGTGCTATCCCTGTACGCCTCTGGCCGTACCACTGGCATCGTGATGGACTCCGGTGACGGGGTCACCCACACTGTGCCCATCTACGAGGGGTATGCCCTCCCCCATGCCATCCTGCGTCTGGACCTGGCTGGCCGGGACCTGACTGACTACCTCATGAAGATCCTCACCGAGCGCGGCTACAGCTTCACCACCACGGCCGAGCGGGAAATCGTGCGTGACATTAAGGAGAAGCTGTGCTACGTCGCCCTGGACTTCGAGCAAGAGATGGCCACGGCTGCTTCCAGCTCCTCCCTGGAGAAGAGCTACGAGCTGCCTGACGGCCAGGTCATCACCATTGGCAATGAGCGGTTCCGCTGCCCTGAGGCACTCTTCCAGCCTTCCTTCCTGGGCATGGAGTCCTGTGGCATCCACGAAACTACCTTCAACTCCATCATGAAGTGTGACGTGGACATCCGCAAAGACCTGTACGCCAACACAGTGCTGTCTGGCGGCACCACCATGTACCCTGGCATTGCCGACAGGATGCAGAAGGAGATCACTGCCCTGGCACCCAGCACAATGAAGATCAAGATCATTGCTCCTCCTGAGCGCAAGTACTCCGTGTGGATCGGCGGCTCCATCCTGGCCTCGCTGTCCACCTTCCAGCAGATGTGGATCAGCAAGCAGGAGTATGACGAGTCCGGCCCCTCCATCGTCCACCGCAAATGCTTCTAG \n ATGGGGAAGAACAAACTCCTTCATCCAAGTCTGGTTCTTCTCCTCTTGGTCCTCCTGCCCACAGACGCCTCAGTCTCTGGAAAACCGCAGTATATGGTTCTGGTCCCCTCCCTGCTCCACACTGAGACCACTGAGAAGGGCTGTGTCCTTCTGAGCTACCTGAATGAGACAGTGACTGTAAGTGCTTCCTTGGAGTCTGTCAGGGGAAACAGGAGCCTCTTCACTGACCTGGAGGCGGAGAATGACGTACTCCACTGTGTCGCCTTCGCTGTCCCAAAGTCTTCATCCAATGAGGAGGTAATGTTCCTCACTGTCCAAGTGAAAGGACCAACCCAAGAATTTAAGAAGCGGACCACAGTGATGGTTAAGAACGAGGACAGTCTGGTCTTTGTCCAGACAGACAAATCAATCTACAAACCAGGGCAGACAGTGAAATTTCGTGTTGTCTCCATGGATGAAAACTTTCACCCCCTGAATGAGTTGATTCCACTAGTATACATTCAGGATCCCAAAGGAAATCGCATCGCACAATGGCAGAGTTTCCAGTTAGAGGGTGGCCTCAAGCAATTTTCTTTTCCCCTCTCATCAGAGCCCTTCCAGGGCTCCTACAAGGTGGTGGTACAGAAGAAATCAGGTGGAAGGACAGAGCACCCTTTCACCGTGGAGGAATTTGTTCTTCCCAAGTTTGAAGTACAAGTAACAGTGCCAAAGATAATCACCATCTTGGAAGAAGAGATGAATGTATCAGTGTGTGGCCTATACACATATGGGAAGCCTGTCCCTGGACATGTGACTGTGAGCATTTGCAGAAAGTATAGTGACGCTTCCGACTGCCACGGTGAAGATTCACAGGCTTTCTGTGAGAAATTCAGTGGACAGCTAAACAGCCATGGCTGCTTCTATCAGCAAGTAAAAACCAAGGTCTTCCAGCTGAAGAGGAAGGAGTATGAAATGAAACTTCACACTGAGGCCCAGATCCAAGAAGAAGGAACAGTGGTGGAATTGACTGGAAGGCAGTCCAGTGAAATCACAAGAACCATAACCAAACTCTCATTTGTGAAAGTGGACTCACACTTTCGACAGGGAATTCCCTTCTTTGGGCAGGTGCGCCTAGTAGATGGGAAAGGCGTCCCTATACCAAATAAAGTCATATTCATCAGAGGAAATGAAGCAAACTATTACTCCAATGCTACCACGGATGAGCATGGCCTTGTACAGTTCTCTATCAACACCACCAATGTTATGGGTACCTCTCTTACTGTTAGGGTCAATTACAAGGATCGTAGTCCCTGTTACGGCTACCAGTGGGTGTCAGAAGAACACGAAGAGGCACATCACACTGCTTATCTTGTGTTCTCCCCAAGCAAGAGCTTTGTCCACCTTGAGCCCATGTCTCATGAACTACCCTGTGGCCATACTCAGACAGTCCAGGCACATTATATTCTGAATGGAGGCACCCTGCTGGGGCTGAAGAAGCTCTCCTTCTATTATCTGATAATGGCAAAGGGAGGCATTGTCCGAACTGGGACTCATGGACTGCTTGTGAAGCAGGAAGACATGAAGGGCCATTTTTCCATCTCAATCCCTGTGAAGTCAGACATTGCTCCTGTCGCTCGGTTGCTCATCTATGCTGTTTTACCTACCGGGGACGTGATTGGGGATTCTGCAAAATATGATGTTGAAAATTGTCTGGCCAACAAGGTGGATTTGAGCTTCAGCCCATCACAAAGTCTCCCAGCCTCACACGCCCACCTGCGAGTCACAGCGGCTCCTCAGTCCGTCTGCGCCCTCCGTGCTGTGGACCAAAGCGTGCTGCTCATGAAGCCTGATGCTGAGCTCTCGGCGTCCTCGGTTTACAACCTGCTACCAGAAAAGGACCTCACTGGCTTCCCTGGGCCTTTGAATGACCAGGACAATGAAGACTGCATCAATCGTCATAATGTCTATATTAATGGAATCACATATACTCCAGTATCAAGTACAAATGAAAAGGATATGTACAGCTTCCTAGAGGACATGGGCTTAAAGGCATTCACCAACTCAAAGATTCGTAAACCCAAAATGTGTCCACAGCTTCAACAGTATGAAATGCATGGACCTGAAGGTCTACGTGTAGGTTTTTATGAGTCAGATGTAATGGGAAGAGGCCATGCACGCCTGGTGCATGTTGAAGAGCCTCACACGGAGACCGTACGAAAGTACTTCCCTGAGACATGGATCTGGGATTTGGTGGTGGTAAACTCAGCAGGTGTGGCTGAGGTAGGAGTAACAGTCCCTGACACCATCACCGAGTGGAAGGCAGGGGCCTTCTGCCTGTCTGAAGATGCTGGACTTGGTATCTCTTCCACTGCCTCTCTCCGAGCCTTCCAGCCCTTCTTTGTGGAGCTCACAATGCCTTACTCTGTGATTCGTGGAGAGGCCTTCACACTCAAGGCCACGGTCCTAAACTACCTTCCCAAATGCATCCGGGTCAGTGTGCAGCTGGAAGCCTCTCCCGCCTTCCTAGCTGTCCCAGTGGAGAAGGAACAAGCGCCTCACTGCATCTGTGCAAACGGGCGGCAAACTGTGTCCTGGGCAGTAACCCCAAAGTCATTAGGAAATGTGAATTTCACTGTGAGCGCAGAGGCACTAGAGTCTCAAGAGCTGTGTGGGACTGAGGTGCCTTCAGTTCCTGAACACGGAAGGAAAGACACAGTCATCAAGCCTCTGTTGGTTGAACCTGAAGGACTAGAGAAGGAAACAACATTCAACTCCCTACTTTGTCCATCAGGTGGTGAGGTTTCTGAAGAATTATCCCTGAAACTGCCACCAAATGTGGTAGAAGAATCTGCCCGAGCTTCTGTCTCAGTTTTGGGAGACATATTAGGCTCTGCCATGCAAAACACACAAAATCTTCTCCAGATGCCCTATGGCTGTGGAGAGCAGAATATGGTCCTCTTTGCTCCTAACATCTATGTACTGGATTATCTAAATGAAACACAGCAGCTTACTCCAGAGATCAAGTCCAAGGCCATTGGCTATCTCAACACTGGTTACCAGAGACAGTTGAACTACAAACACTATGATGGCTCCTACAGCACCTTTGGGGAGCGATATGGCAGGAACCAGGGCAACACCTGGCTCACAGCCTTTGTTCTGAAGACTTTTGCCCAAGCTCGAGCCTACATCTTCATCGATGAAGCACACATTACCCAAGCCCTCATATGGCTCTCCCAGAGGCAGAAGGACAATGGCTGTTTCAGGAGCTCTGGGTCACTGCTCAACAATGCCATAAAGGGAGGAGTAGAAGATGAAGTGACCCTCTCCGCCTATATCACCATCGCCCTTCTGGAGATTCCTCTCACAGTCACTCACCCTGTTGTCCGCAATGCCCTGTTTTGCCTGGAGTCAGCCTGGAAGACAGCACAAGAAGGGGACCATGGCAGCCATGTATATACCAAAGCACTGCTGGCCTATGCTTTTGCCCTGGCAGGTAACCAGGACAAGAGGAAGGAAGTACTCAAGTCACTTAATGAGGAAGCTGTGAAGAAAGACAACTCTGTCCATTGGGAGCGCCCTCAGAAACCCAAGGCACCAGTGGGGCATTTTTACGAACCCCAGGCTCCCTCTGCTGAGGTGGAGATGACATCCTATGTGCTCCTCGCTTATCTCACGGCCCAGCCAGCCCCAACCTCGGAGGACCTGACCTCTGCAACCAACATCGTGAAGTGGATCACGAAGCAGCAGAATGCCCAGGGCGGTTTCTCCTCCACCCAGGACACAGTGGTGGCTCTCCATGCTCTGTCCAAATATGGAGCAGCCACATTTACCAGGACTGGGAAGGCTGCACAGGTGACTATCCAGTCTTCAGGGACATTTTCCAGCAAATTCCAAGTGGACAACAACAACCGCCTGTTACTGCAGCAGGTCTCATTGCCAGAGCTGCCTGGGGAATACAGCATGAAAGTGACAGGAGAAGGATGTGTCTACCTCCAGACATCCTTGAAATACAATATTCTCCCAGAAAAGGAAGAGTTCCCCTTTGCTTTAGGAGTGCAGACTCTGCCTCAAACTTGTGATGAACCCAAAGCCCACACCAGCTTCCAAATCTCCCTAAGTGTCAGTTACACAGGGAGCCGCTCTGCCTCCAACATGGCGATCGTTGATGTGAAGATGGTCTCTGGCTTCATTCCCCTGAAGCCAACAGTGAAAATGCTTGAAAGATCTAACCATGTGAGCCGGACAGAAGTCAGCAGCAACCATGTCTTGATTTACCTTGATAAGGTGTCAAATCAGACACTGAGCTTGTTCTTCACGGTTCTGCAAGATGTCCCAGTAAGAGATCTGAAACCAGCCATAGTGAAAGTCTATGATTACTACGAGACGGATGAGTTTGCAATTGCTGAGTACAATGCTCCTTGCAGCAAAGATCTTGGAAATGCTTGA",
    "ATGGACCATTATGATTCTCAGCAAACCAACGATTACATGCAGCCAGAAGAGGACTGGGACCGGGACCTGCTCCTGGACCCGGCCTGGGAGAAGCAGCAGAGAAAGACATTCACGGCATGGTGTAACTCCCACCTCCGGAAGGCGGGGACACAGATCGAGAACATCGAAGAGGACTTCCGGGATGGCCTGAAGCTCATGCTGCTGCTGGAGGTCATCTCAGGTGAACGCTTGGCCAAGCCAGAGCGAGGCAAGATGAGAGTGCACAAGATCTCCAACGTCAACAAGGCCCTGGATTTCATAGCCAGCAAAGGCGTCAAACTGGTGTCCATCGGAGCCGAAGAAATCGTGGATGGGAATGTGAAGATGACCCTGGGCATGATCTGGACCATCATCCTGCGCTTTGCCATCCAGGACATCTCCGTGGAAGAGACTTCAGCCAAGGAAGGGCTGCTCCTGTGGTGTCAGAGAAAGACAGCCCCTTACAAAAATGTCAACATCCAGAACTTCCACATAAGCTGGAAGGATGGCCTCGGCTTCTGTGCTTTGATCCACCGACACCGGCCCGAGCTGATTGACTACGGGAAGCTGCGGAAGGATGATCCACTCACAAATCTGAATACGGCTTTTGACGTGGCAGAGAAGTACCTGGACATCCCCAAGATGCTGGATGCCGAAGACATCGTTGGAACTGCCCGACCGGATGAGAAAGCCATCATGACTTACGTGTCTAGCTTCTACCACGCCTTCTCTGGAGCCCAGAAGGCGGAGACAGCAGCCAATCGCATCTGCAAGGTGTTGGCCGTCAACCAGGAGAACGAGCAGCTTATGGAAGACTACGAGAAGCTGGCCAGTGATCTGTTGGAGTGGATCCGCCGCACAATCCCGTGGCTGGAGAACCGGGTGCCCGAGAACACCATGCATGCCATGCAACAGAAGCTGGAGGACTTCCGGGACTACCGGCGCCTGCACAAGCCGCCCAAGGTGCAGGAGAAGTGCCAGCTGGAGATCAACTTCAACACGCTGCAGACCAAGCTGCGGCTCAGCAACCGGCCTGCCTTCATGCCCTCTGAGGGCAGGATGGTCTCGGACATCAACAATGCCTGGGGCTGCCTGGAGCAGGTGGAGAAGGGCTATGAGGAGTGGTTGCTGAATGAGATCCGGAGGCTGGAGCGACTGGACCACCTGGCAGAGAAGTTCCGGCAGAAGGCCTCCATCCACGAGGCCTGGACTGACGGCAAAGAGGCCATGCTGCGACAGAAGGACTATGAGACCGCCACCCTCTCGGAGATCAAGGCCCTGCTCAAGAAGCATGAGGCCTTCGAGAGTGACCTGGCTGCCCACCAGGACCGTGTGGAGCAGATTGCCGCCATCGCACAGGAGCTCAATGAGCTGGACTATTATGACTCACCCAGTGTCAACGCCCGTTGCCAAAAGATCTGTGACCAGTGGGACAATCTGGGGGCCCTAACTCAGAAGCGAAGGGAAGCTCTGGAGCGGACCGAGAAACTGCTGGAGACCATTGACCAGCTGTACTTGGAGTATGCCAAGCGGGCTGCACCCTTCAACAACTGGATGGAGGGGGCCATGGAGGACCTGCAGGACACCTTCATTGTGCACACCATTGAGGAGATCCAGGGACTGACCACAGCCCATGAGCAGTTCAAGGCCACCCTCCCTGATGCCGACAAGGAGCGCCTGGCCATCCTGGGCATCCACAATGAGGTGTCCAAGATTGTCCAGACCTACCACGTCAATATGGCGGGCACCAACCCCTACACAACCATCACGCCTCAGGAGATCAATGGCAAATGGGACCACGTGCGGCAGCTGGTGCCTCGGAGGGACCAAGCTCTGACGGAGGAGCATGCCCGACAGCAGCACAATGAGAGGCTACGCAAGCAGTTTGGAGCCCAGGCCAATGTCATCGGGCCCTGGATCCAGACCAAGATGGAGGAGATCGGGAGGATCTCCATTGAGATGCATGGGACCCTGGAGGACCAGCTCAGCCACCTGCGGCAGTATGAGAAGAGCATCGTCAACTACAAGCCAAAGATTGATCAGCTGGAGGGCGACCACCAGCTCATCCAGGAGGCGCTCATCTTCGACAACAAGCACACCAACTACACCATGGAGCACATCCGTGTGGGCTGGGAGCAGCTGCTCACCACCATCGCCAGGACCATCAATGAGGTAGAGAACCAGATCCTGACCCGGGATGCCAAGGGCATCAGCCAGGAGCAGATGAATGAGTTCCGGGCCTCCTTCAACCACTTTGACCGGGATCACTCCGGCACACTGGGTCCCGAGGAGTTCAAAGCCTGCCTCATCAGCTTGGGTTATGATATTGGCAACGACCCCCAGGGAGAAGCAGAATTTGCCCGCATCATGAGCATTGTGGACCCCAACCGCCTGGGGGTAGTGACATTCCAGGCCTTCATTGACTTCATGTCCCGCGAGACAGCCGACACAGATACAGCAGACCAAGTCATGGCTTCCTTCAAGATCCTGGCTGGGGACAAGAACTACATTACCATGGACGAGCTGCGCCGCGAGCTGCCACCCGACCAGGCTGAGTACTGCATCGCGCGGATGGCCCCCTACACCGGCCCCGACTCCGTGCCAGGTGCTCTGGACTACATGTCCTTCTCCACGGCGCTGTACGGCGAGAGTGACCTCTAA",
    "ATGTCGCTTTCTAACAAGCTGACGCTGGACAAGCTGGACGTTAAAGGGAAGCGGGTCGTTATGAGAGTCGACTTCAATGTTCCTATGAAGAACAACCAGATAACAAACAACCAGAGGATTAAGGCTGCTGTCCCAAGCATCAAATTCTGCTTGGACAATGGAGCCAAGTCGGTAGTCCTTATGAGCCACCTAGGCCGGCCTGATGGTGTGCCCATGCCTGACAAGTACTCCTTAGAGCCAGTTGCTGTAGAACTCAAATCTCTGCTGGGCAAGGATGTTCTGTTCTTGAAGGACTGTGTAGGCCCAGAAGTGGAGAAAGCCTGTGCCAACCCAGCTGCTGGGTCTGTCATCCTGCTGGAGAACCTCCGCTTTCATGTGGAGGAAGAAGGGAAGGGAAAAGATGCTTCTGGGAACAAGGTTAAAGCCGAGCCAGCCAAAATAGAAGCTTTCCGAGCTTCACTTTCCAAGCTAGGGGATGTCTATGTCAATGATGCTTTTGGCACTGCTCACAGAGCCCACAGCTCCATGGTAGGAGTCAATCTGCCACAGAAGGCTGGTGGGTTTTTGATGAAGAAGGAGCTGAACTACTTTGCAAAGGCCTTGGAGAGCCCAGAGCGACCCTTCCTGGCCATCCTGGGCGGAGCTAAAGTTGCAGACAAGATCCAGCTCATCAATAATATGCTGGACAAAGTCAATGAGATGATTATTGGTGGTGGAATGGCTTTTACCTTCCTTAAGGTGCTCAACAACATGGAGATTGGCACTTCTCTGTTTGATGAAGAGGGAGCCAAGATTGTCAAAGACCTAATGTCCAAAGCTGAGAAGAATGGTGTGAAGATTACCTTGCCTGTTGACTTTGTCACTGCTGACAAGTTTGATGAGAATGCCAAGACTGGCCAAGCCACTGTGGCTTCTGGCATACCTGCTGGCTGGATGGGCTTGGACTGTGGTCCTGAAAGCAGCAAGAAGTATGCTGAGGCTGTCACTCGGGCTAAGCAGATTGTGTGGAATGGTCCTGTGGGGGTATTTGAATGGGAAGCTTTTGCCCGGGGAACCAAAGCTCTCATGGATGAGGTGGTGAAAGCCACTTCTAGGGGCTGCATCACCATCATAGGTGGTGGAGACACTGCCACTTGCTGTGCCAAATGGAACACGGAGGATAAAGTCAGCCATGTGAGCACTGGGGGTGGTGCCAGTTTGGAGCTCCTGGAAGGTAAAGTCCTTCCTGGGGTGGATGCTCTCAGCAATATTTAG",
    "ATGCCCAGGGAAGACAGGGCGACCTGGAAGTCCAACTACTTCCTTAAGATCATCCAACTATTGGATGATTATCCGAAATGTTTCATTGTGGGAGCAGACAATGTGGGCTCCAAGCAGATGCAGCAGATCCGCATGTCCCTTCGCGGGAAGGCTGTGGTGCTGATGGGCAAGAACACCATGATGCGCAAGGCCATCCGAGGGCACCTGGAAAACAACCCAGCTCTGGAGAAACTGCTGCCTCATATCCGGGGGAATGTGGGCTTTGTGTTCACCAAGGAGGACCTCACTGAGATCAGGGACATGTTGCTGGCCAATAAGGTGCCAGCTGCTGCCCGTGCTGGTGCCATTGCCCCATGTGAAGTCACTGTGCCAGCCCAGAACACTGGTCTCGGGCCCGAGAAGACCTCCTTTTTCCAGGCTTTAGGTATCACCACTAAAATCTCCAGGGGCACCATTGAAATCCTGAGTGATGTGCAGCTGATCAAGACTGGAGACAAAGTGGGAGCCAGCGAAGCCACGCTGCTGAACATGCTCAACATCTCCCCCTTCTCCTTTGGGCTGGTCATCCAGCAGGTGTTCGACAATGGCAGCATCTACAACCCTGAAGTGCTTGATATCACAGAGGAAACTCTGCATTCTCGCTTCCTGGAGGGTGTCCGCAATGTTGCCAGTGTCTGTCTGCAGATTGGCTACCCAACTGTTGCATCAGTACCCCATTCTATCATCAACGGGTACAAACGAGTCCTGGCCTTGTCTGTGGAGACGGATTACACCTTCCCACTTGCTGAAAAGGTCAAGGCCTTCTTGGCTGATCCATCTGCCTTTGTGGCTGCTGCCCCTGTGGCTGCTGCCACCACAGCTGCTCCTGCTGCTGCTGCAGCCCCAGCTAAGGTTGAAGCCAAGGAAGAGTCGGAGGAGTCGGACGAGGATATGGGATTTGGTCTCTTTGACTAA",
    "ATGGGGAAGGTGAAGGTCGGAGTCAACGGATTTGGTCGTATTGGGCGCCTGGTCACCAGGGCTGCTTTTAACTCTGGTAAAGTGGATATTGTTGCCATCAATGACCCCTTCATTGACCTCAACTACATGGTTTACATGTTCCAATATGATTCCACCCATGGCAAATTCCATGGCACCGTCAAGGCTGAGAACGGGAAGCTTGTCATCAATGGAAATCCCATCACCATCTTCCAGGAGCGAGATCCCTCCAAAATCAAGTGGGGCGATGCTGGCGCTGAGTACGTCGTGGAGTCCACTGGCGTCTTCACCACCATGGAGAAGGCTGGGGCTCATTTGCAGGGGGGAGCCAAAAGGGTCATCATCTCTGCCCCCTCTGCTGATGCCCCCATGTTCGTCATGGGTGTGAACCATGAGAAGTATGACAACAGCCTCAAGATCATCAGCAATGCCTCCTGCACCACCAACTGCTTAGCACCCCTGGCCAAGGTCATCCATGACAACTTTGGTATCGTGGAAGGACTCATGACCACAGTCCATGCCATCACTGCCACCCAGAAGACTGTGGATGGCCCCTCCGGGAAACTGTGGCGTGATGGCCGCGGGGCTCTCCAGAACATCATCCCTGCCTCTACTGGCGCTGCCAAGGCTGTGGGCAAGGTCATCCCTGAGCTGAACGGGAAGCTCACTGGCATGGCCTTCCGTGTCCCCACTGCCAACGTGTCAGTGGTGGACCTGACCTGCCGTCTAGAAAAACCTGCCAAATATGATGACATCAAGAAGGTGGTGAAGCAGGCGTCGGAGGGCCCCCTCAAGGGCATCCTGGGCTACACTGAGCACCAGGTGGTCTCCTCTGACTTCAACAGCGACACCCACTCCTCCACCTTTGACGCTGGGGCTGGCATTGCCCTCAACGACCACTTTGTCAAGCTCATTTCCTGGTATGACAACGAATTTGGCTACAGCAACAGGGTGGTGGACCTCATGGCCCACATGGCCTCCAAGGAGTAA",
    "ATGGTTTACATGTTCCAATATGATTCCACCCATGGCAAATTCCATGGCACCGTCAAGGCTGAGAACGGGAAGCTTGTCATCAATGGAAATCCCATCACCATCTTCCAGGAGCGAGATCCCTCCAAAATCAAGTGGGGCGATGCTGGCGCTGAGTACGTCGTGGAGTCCACTGGCGTCTTCACCACCATGGAGAAGGCTGGGGCTCATTTGCAGGGGGGAGCCAAAAGGGTCATCATCTCTGCCCCCTCTGCTGATGCCCCCATGTTCGTCATGGGTGTGAACCATGAGAAGTATGACAACAGCCTCAAGATCATCAGCAATGCCTCCTGCACCACCAACTGCTTAGCACCCCTGGCCAAGGTCATCCATGACAACTTTGGTATCGTGGAAGGACTCATGACCACAGTCCATGCCATCACTGCCACCCAGAAGACTGTGGATGGCCCCTCCGGGAAACTGTGGCGTGATGGCCGCGGGGCTCTCCAGAACATCATCCCTGCCTCTACTGGCGCTGCCAAGGCTGTGGGCAAGGTCATCCCTGAGCTGAACGGGAAGCTCACTGGCATGGCCTTCCGTGTCCCCACTGCCAACGTGTCAGTGGTGGACCTGACCTGCCGTCTAGAAAAACCTGCCAAATATGATGACATCAAGAAGGTGGTGAAGCAGGCGTCGGAGGGCCCCCTCAAGGGCATCCTGGGCTACACTGAGCACCAGGTGGTCTCCTCTGACTTCAACAGCGACACCCACTCCTCCACCTTTGACGCTGGGGCTGGCATTGCCCTCAACGACCACTTTGTCAAGCTCATTTCCTGGTATGACAACGAATTTGGCTACAGCAACAGGGTGGTGGACCTCATGGCCCACATGGCCTCCAAGGAGTAA",
    "ATGGTGCATCTGACTCCTGAGGAGAAGTCTGCCGTTACTGCCCTGTGGGGCAAGGTGAACGTGGATGAAGTTGGTGGTGAGGCCCTGGGCAGGCTGCTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAGTCCTTTGGGGATCTGTCCACTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAAGTGCTCGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACCTTTGCCACACTGAGTGAGCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGCTCCTGGGCAACGTGCTGGTCTGTGTGCTGGCCCATCACTTTGGCAAAGAATTCACCCCACCAGTGCAGGCTGCCTATCAGAAAGTGGTGGCTGGTGTGGCTAATGCCCTGGCCCACAAGTATCACTAA",
    "ATGGTGCTGTCTCCTGCCGACAAGACCAACGTCAAGGCCGCCTGGGGTAAGGTCGGCGCGCACGCTGGCGAGTATGGTGCGGAGGCCCTGGAGAGGATGTTCCTGTCCTTCCCCACCACCAAGACCTACTTCCCGCACTTCGACCTGAGCCACGGCTCTGCCCAGGTTAAGGGCCACGGCAAGAAGGTGGCCGACGCGCTGACCAACGCCGTGGCGCACGTGGACGACATGCCCAACGCGCTGTCCGCCCTGAGCGACCTGCACGCGCACAAGCTTCGGGTGGACCCGGTCAACTTCAAGCTCCTAAGCCACTGCCTGCTGGTGACCCTGGCCGCCCACCTCCCCGCCGAGTTCACCCCTGCGGTGCACGCCTCCCTGGACAAGTTCCTGGCTTCTGTGAGCACCGTGCTGACCTCCAAATACCGTTAA",
    "ATGGTGCATCTGACTCCTGAGGAGAAGACTGCTGTCAATGCCCTGTGGGGCAAAGTGAACGTGGATGCAGTTGGTGGTGAGGCCCTGGGCAGATTACTGGTGGTCTACCCTTGGACCCAGAGGTTCTTTGAGTCCTTTGGGGATCTGTCCTCTCCTGATGCTGTTATGGGCAACCCTAAGGTGAAGGCTCATGGCAAGAAGGTGCTAGGTGCCTTTAGTGATGGCCTGGCTCACCTGGACAACCTCAAGGGCACTTTTTCTCAGCTGAGTGAGCTGCACTGTGACAAGCTGCACGTGGATCCTGAGAACTTCAGGCTCTTGGGCAATGTGCTGGTGTGTGTGCTGGCCCGCAACTTTGGCAAGGAATTCACCCCACAAATGCAGGCTGCCTATCAGAAGGTGGTGGCTGGTGTGGCTAATGCCCTGGCTCACAAGTACCATTGA",
]

class CAICalculator:
    def __init__(self, target_rna: str):
        self.target_rna = target_rna
        self.target_dna = target_rna.replace("U", "T")
        self.reference_seqs = def_refs

    def _load_reference_sequences_from_file(self, filepath: str) -> list[str]:
        with open(filepath, "r") as f:
            return [line.strip() for line in f if line.strip()]

    def compute_cai(self) -> float:
        cai_obj = CAI(self.target_dna, reference=self.reference_seqs)
        return safe_float_from_cai_obj(cai_obj)


NUCLEOTIDES = ["A", "C", "G", "T"]
CODONS = [''.join(c) for c in itertools.product(NUCLEOTIDES, repeat=3)]

def clean_dna(seq: str) -> str:
    seq = seq.upper().replace(" ", "").replace("\n", "")
    seq = seq.replace("U", "T")
    seq = re.sub(r'[^ACGT]', '', seq)
    return seq

def codon_list_from_dna(seq: str):
    seq = clean_dna(seq)
    L = (len(seq) // 3) * 3
    seq = seq[:L]
    return [seq[i:i+3] for i in range(0, len(seq), 3)]

def codon_freqs_vector(seq: str):
    codons = codon_list_from_dna(seq)
    c = Counter(codons)
    total = max(1, len(codons))
    return np.array([c.get(codon, 0) / total for codon in CODONS], dtype=float)

def gc_content(seq: str):
    seq = clean_dna(seq)
    if len(seq) == 0: return 0.0
    return (seq.count("G") + seq.count("C")) / len(seq)

def gc3_content(seq: str):
    codons = codon_list_from_dna(seq)
    if len(codons) == 0:
        return 0.0
    thirds = [codon[2] for codon in codons]
    return (thirds.count("G") + thirds.count("C")) / len(thirds)

def nt_length(seq: str):
    return len(clean_dna(seq))

def aa_length_from_protein(protein_seq: str):
    if not isinstance(protein_seq, str):
        return 0
    p = protein_seq.replace(" ", "").replace("\n", "")
    p = p.replace("*", "")
    return len(p)

def aa_composition_vector(protein_seq: str):
    aa_alphabet = list("ACDEFGHIKLMNPQRSTVWY")
    p = (protein_seq or "").upper().replace(" ", "").replace("*", "")
    total = max(1, len(p))
    c = Counter(p)
    return np.array([c.get(aa, 0) / total for aa in aa_alphabet], dtype=float)


def build_feature_dataframe(df: pd.DataFrame, coding_col="coding_sequence", protein_col="protein_sequence"):
    
    feats = []
    for _, row in df.iterrows():
        coding = row.get(coding_col, "")
        coding_clean = clean_dna(coding)
        codon_vec = codon_freqs_vector(coding_clean)
        gc = gc_content(coding_clean)
        gc3 = gc3_content(coding_clean)
        ntlen = nt_length(coding_clean)
        aal = aa_length_from_protein(row.get(protein_col, ""))

        aa_comp = aa_composition_vector(row.get(protein_col, "")) if protein_col in df.columns else np.zeros(20)
        feat = {
            "gc": gc,
            "gc3": gc3,
            "nt_length": ntlen,
            "aa_length": aal,
        }
        codon_dict = {f"codon_{codon}": val for codon, val in zip(CODONS, codon_vec)}
        aa_dict = {f"aa_{aa}": val for aa, val in zip(list("ACDEFGHIKLMNPQRSTVWY"), aa_comp)}
        feat.update(codon_dict)
        feat.update(aa_dict)
        feats.append(feat)
    feat_df = pd.DataFrame(feats)
    return feat_df

def compute_cai_for_df(df: pd.DataFrame, coding_col="coding_sequence"):
    cai_vals = []
    for _, row in df.iterrows():
        coding = clean_dna(row.get(coding_col, ""))
        target_rna = coding.replace("T", "U")
        calc = CAICalculator(target_rna=target_rna)
        try:
            cai_val = calc.compute_cai()
        except Exception as e:
            print(f"CAI computation failed for row {_}: {e}")
            cai_val = np.nan
        cai_vals.append(cai_val)
    return np.array(cai_vals, dtype=float)


def train_and_evaluate(X, y, random_state=42):
    X = np.asarray(X, dtype=float)
    y = np.asarray(y, dtype=float)

    mask = ~np.isnan(y)
    X = X[mask]
    y = y[mask]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=random_state)

    ridge = Pipeline([
        ("scaler", StandardScaler()),
        ("ridge", RidgeCV(alphas=[0.1, 1.0, 10.0], scoring="r2", cv=5))
    ])
    ridge.fit(X_train, y_train)
    y_pred_ridge = ridge.predict(X_test)

    rf = Pipeline([
        ("scaler", StandardScaler()),
        ("rf", RandomForestRegressor(n_estimators=200, random_state=random_state, n_jobs=-1))
    ])
    rf.fit(X_train, y_train)
    y_pred_rf = rf.predict(X_test)

    def metrics(y_true, y_pred):
        return {
            "r2": r2_score(y_true, y_pred),
            "mae": mean_absolute_error(y_true, y_pred),
            "rmse": mean_squared_error(y_true, y_pred)
        }

    results = {
        "ridge": metrics(y_test, y_pred_ridge),
        "rf": metrics(y_test, y_pred_rf),
    }

    cv = KFold(n_splits=5, shuffle=True, random_state=random_state)
    cv_scores_rf = cross_val_score(rf, X, y, scoring="r2", cv=cv, n_jobs=-1)
    results["rf_cv_r2_mean"] = np.mean(cv_scores_rf)
    results["rf_cv_r2_std"] = np.std(cv_scores_rf)

    rf_model = rf.named_steps["rf"]
    feat_importances = rf_model.feature_importances_

    return results, ridge, rf, feat_importances


if __name__ == "__main__":

    df = pd.read_csv("Protein_mRNA_sequence_dataset.csv", sep=",")

    print("Computing CAI for each sequence (this may take a while)...")

    cai_array = compute_cai_for_df(df, coding_col="coding_sequence")
    df["CAI"] = cai_array

    X_df = build_feature_dataframe(df, coding_col="coding_sequence", protein_col="protein_sequence")
    X_df.to_csv("features_debug.csv", index=False)  # save for inspection

    X = X_df.values
    y = df["CAI"].values

    res, ridge_pipe, rf_pipe, feat_importances = train_and_evaluate(X, y)
    print("Results:", res)

    feat_names = X_df.columns.tolist()
    top_idx = np.argsort(feat_importances)[::-1][:30]
    print("Top 30 RF features:")
    for i in top_idx:
        print(f"{feat_names[i]} => {feat_importances[i]:.4f}")
